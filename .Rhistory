dim(table(output_vec))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = output_vec, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
output_vec
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS", "Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE", "Lake-Effect Snow", "Lakeshore Flood",
"Lightning|LIGNTNING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|wave", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic Ash|volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = output_vec, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
output_vec
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN|BEACH EROSION",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS", "Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE|BLACK ICE", "Lake-Effect Snow", "Lakeshore Flood",
"Lightning|LIGNTNING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|wave", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic Ash|volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = output_vec, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
output_vec
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN|BEACH EROSION",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS", "Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE|BLACK ICE", "Lake-Effect Snow", "Lakeshore Flood",
"Lightning|LIGNTNING|LIGHTING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|wave", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic Ash|volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = output_vec, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
output_vec
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN|BEACH EROSION",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS|WIND DAMAGE",
"Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE|BLACK ICE", "Lake-Effect Snow",
"Lakeshore Flood",
"Lightning|LIGNTNING|LIGHTING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|wave", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic Ash|volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = output_vec, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
output_vec
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN|BEACH EROSION",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS|WIND DAMAGE",
"Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE|BLACK ICE", "Lake-Effect Snow",
"Lakeshore Flood",
"Lightning|LIGNTNING|LIGHTING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|WAVE|SURGE", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic Ash|volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = output_vec, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
dim(table(myDataEvents))
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
dim(table(myDataEvents))
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN|BEACH EROSION",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS|WIND DAMAGE",
"Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE|BLACK ICE", "Lake-Effect Snow",
"Lakeshore Flood",
"Lightning|LIGNTNING|LIGHTING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|WAVE|SURGE", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(myDataEvents))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = myData$EVTYPE, pattern = eventNamesSearch[i], ignore.case = TRUE)] <- (eventNames[i])
# eventNamePairs <-
}
dim(table(output_vec))
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
eventNamesSearch <- c("Astronomical Low Tide", "Avalanche|AVALANCE", "Blizzard",
"Coastal Flood",
"Cold/Wind Chill", "Debris Flow|slide|land",
"Dense Fog", "Dense Smoke|smoke",
"Drought", "Dust Devil", "Dust Storm|SAHARAN DUST", "Excessive Heat",
"Extreme Cold/Wind Chill|cold|cool|LOW TEMP|CHILL",
"Flash Flood", "Flood|urban|stream", "Frost|Freeze",
"Funnel Cloud|CLOUD", "Freezing Fog", "Hail",
"Heat|WARM|HOT|HIGH TEMP",
"Heavy Rain|RAIN|SHOWER|PRECIPATATION|PRECIPITATION|HEAVY MIX|MIXED PRECIP",
"Heavy Snow|snow",
"High Surf|ASTRONOMICAL HIGH TIDE|BEACH EROSIN|BEACH EROSION",
"High Wind|^wind|wnd|WHIRLWIND|^ WIND|GUSTY WINDS|WIND DAMAGE",
"Hurricane|Typhoon",
"Ice Storm|^ICE|^ICY|PATCHY ICE|BLACK ICE", "Lake-Effect Snow",
"Lakeshore Flood",
"Lightning|LIGNTNING|LIGHTING",
"Marine Hail", "Marine High Wind", "Marine Strong Wind",
"Marine Thunderstorm Wind", "Rip Current|ROUGH SURF", "Seiche", "Sleet",
"Storm Surge|Tide|SEAS$|WAVE|SURGE", "Strong Wind",
"Thunderstorm|TSTM|THUNDE|TUNDERSTORM|THUDERSTORM|THUNERSTORM|MICROBURST",
"Tornado",
"Tropical Depression", "Tropical Storm", "Tsunami",
"Volcanic",
"Waterspout|Water spout|WAYTERSPOUT", "Wildfire|fire", "Winter Storm",
"Winter Weather|Wintry|Wintery|WINTER MIX","dry|wet","summary")
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(myDataEvents))
for (i in seq_along(eventNamesSearch)){
# print(eventNames[i])
output_vec[grepl(x = myData$EVTYPE, pattern = eventNamesSearch[i],
ignore.case = TRUE)] <- (eventNames[i])
}
myData$EVTYPE <- output_vec
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
output_vec <- as.character(myDataEvents)
dim(table(output_vec))
myDataEvents
myDataEvents <- data.frame(table(myData$EVTYPE))[,1]
dim(table(output_vec))
myDataHealth <- select(myData, INJURIES, FATALITIES)
myDataHealth <- data.frame(myData$EVTYPE, myData$INJURIES, myData$FATALITIES)
colnames(myDataHealth) <- c("EVTYPE", "INJURIES", "FATALITIES")
sumByEvent <- ddply(myDataHealth, EVTYPE, numcolwise(sum))
sumByEvent <- ddply(myDataHealth, E"VTYPE", numcolwise(sum))
sumByEvent <- ddply(myDataHealth, "EVTYPE", numcolwise(sum))
View(sumByEvent)
data_download <- mdy("August 9, 2015")
myData <- read.csv("activity.csv")
setwd('~/R/Reproducible_research/RepData_PeerAssessment1/')
library(plyr)
library(lubridate)
library(lattice)
options(scipen = 1, digits = 2)
data_download <- mdy("August 9, 2015")
myData <- read.csv("activity.csv")
myData$date <- ymd(as.character(myData$date))
totalsByDay <- ddply(myData, "date", numcolwise(sum))$steps
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
title(xlab = "Number of steps", ylab = "Frequency", main = "Total number of steps per day")
stepsMean <- mean(totalsByDay, na.rm = TRUE)
stepsMedian <- median(totalsByDay, na.rm = TRUE)
sumByInterval <- ddply(myData, "interval", na.rm = TRUE, numcolwise(sum))
numOfdays <- length(totalsByDay)
avStepsInterval <- sumByInterval$steps/numOfdays
plot(sumByInterval$interval, avStepsInterval, type = "l", col = "blue", lwd = 2, ann = FALSE)
title(xlab = "Interval", ylab = "Av. Steps", main = "Average steps for intervals")
maxIndex <- which(max(sumByInterval$steps, na.rm = TRUE) == sumByInterval$steps, arr.ind = TRUE)
maxInterval <- sumByInterval$interval[maxIndex]
timeHour <- maxInterval %/% 100
timeMinute <- maxInterval %% 100
numNAs <- sum(is.na(myData$steps))
dataLength <- dim(myData)[1]
noNAs <- rep(0, dataLength)
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i], arr.ind = TRUE)
noNAs[i] <- avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
myDataNew <- data.frame(noNAs, myData$date, myData$interval)
colnames(myDataNew) <- c("steps", "date", "interval")
View(myData)
summary(myData)
summary(myDataNew)
totalsByDayNew <- ddply(myDataNew, "date", numcolwise(sum))$steps
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
title(xlab = "Number of steps", ylab = "Frequency", main = "Total number of steps per day without NAs")
hist(totalsByDay, col = "red", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
title(xlab = "Number of steps", ylab = "Frequency", main = "Total number of steps per day without NAs")
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "green", ann = FALSE, breaks = 10,add=T)
hist(totalsByDay, col = "red", ann = FALSE, breaks = 10,add=T)
hist(totalsByDay, col = "none", ann = FALSE, breaks = 10,add=T)
hist(totalsByDayNew, col = "green", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "none", ann = FALSE, breaks = 10,add=T)
hist(totalsByDayNew, col = "red", ann = FALSE, breaks = 10)
hist(totalsByDay, col = "blue", ann = FALSE, breaks = 10,add=T)
hist(totalsByDayNew, col = rgb(0.1,0.1,0.1,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0.8,0.8,0.8,0.5), ann = FALSE, breaks = 10,add=T)
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10,add=T)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10)
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10, add=T)
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10, add=T)
hist(totalsByDayNew, col = rgb(1,0,0,0), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10, add=T)
hist(totalsByDay, col = rgb(0,0,1,0), ann = FALSE, breaks = 10, add=T)
hist(totalsByDayNew, col = rgb(1,0,0,0), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0), ann = FALSE, breaks = 10, add=T)
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10, add=T)
sumByInterval <- ddply(myData1, "interval", na.rm = TRUE, numcolwise(sum))
numOfdays <- length(totalsByDay)
sumByInterval <- ddply(myDataNAOmit, "interval", na.rm = TRUE, numcolwise(sum))
myDataNAOmit <- na.omit(myData)   # data set without NA's
totalsByDay <- ddply(myDataNAOmit, "date", na.rm = TRUE, numcolwise(sum))$steps
sumByInterval <- ddply(myDataNAOmit, "interval", na.rm = TRUE, numcolwise(sum))
numOfdays <- length(totalsByDay)
avStepsInterval <- sumByInterval$steps/numOfdays
plot(sumByInterval$interval, avStepsInterval,
type = "l", col = "blue", lwd = 2, ann = FALSE)
title(xlab = "Interval", ylab = "Av. Steps",
main = "Average steps for intervals")
box()
View(sumByInterval)
table(myDataNAOmit$date)
table(myDataNAOmit$interval)
summary(table(myDataNAOmit$interval))
dataLength <- dim(myData)[1]
noNAs <- rep(0, dataLength)
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i],
arr.ind = TRUE)
print(intervalIndex)
noNAs[i] <- avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i],
arr.ind = TRUE)
print(myData$interval[i])
noNAs[i] <- avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i],
arr.ind = TRUE)
print(myData$interval[i], avStepsInterval[intervalIndex])
noNAs[i] <- avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i],
arr.ind = TRUE)
print( c(myData$interval[i], avStepsInterval[intervalIndex]))
noNAs[i] <- avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
totalsByDayNew <- ddply(myDataNew, "date", numcolwise(sum))$steps
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10, add = T)
title(xlab = "Number of steps", ylab = "Frequency",
main = "Total number of steps per day without NAs")
box()
myDataNew <- data.frame(noNAs, myData$date, myData$interval)
colnames(myDataNew) <- c("steps", "date", "interval")
totalsByDayNew <- ddply(myDataNew, "date", numcolwise(sum))$steps
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10, add = T)
title(xlab = "Number of steps", ylab = "Frequency",
main = "Total number of steps per day without NAs")
dataLength <- dim(myData)[1]
noNAs <- rep(0, dataLength)
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i],
arr.ind = TRUE)
print( c(myData$interval[i], avStepsInterval[intervalIndex]))
noNAs[i] <- avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
max(avStepsInterval, na.rm = TRUE)
plot(sumByInterval$interval, avStepsInterval,
type = "l", col = "blue", lwd = 2, ann = FALSE)
dataLength <- dim(myData)[1]
noNAs <- rep(0, dataLength)
for (i in 1:dataLength) {
if (is.na(myData$steps[i])) {
intervalIndex <- which(sumByInterval$interval == myData$interval[i],
arr.ind = TRUE)
print( c(myData$interval[i], avStepsInterval[intervalIndex]))
noNAs[i] <- 100 # avStepsInterval[intervalIndex]
} else {
noNAs[i] <- myData$steps[i]
}
}
myDataNew <- data.frame(noNAs, myData$date, myData$interval)
colnames(myDataNew) <- c("steps", "date", "interval")
totalsByDayNew <- ddply(myDataNew, "date", numcolwise(sum))$steps
hist(totalsByDayNew, col = rgb(1,0,0,0.5), ann = FALSE, breaks = 10)
hist(totalsByDay, col = rgb(0,0,1,0.5), ann = FALSE, breaks = 10, add = T)
title(xlab = "Number of steps", ylab = "Frequency",
main = "Total number of steps per day without NAs")
box()
summary(table(myDataNew$interval))
sumByIntervalNew <- ddply(myDataNew, "interval", na.rm = TRUE, numcolwise(sum))
# check that each interval has same number of values (days):
summary(table(myDataNew$interval))
numOfdaysNew <- length(totalsByDayNew)
avStepsInterval <- sumByIntervalNew$steps/numOfdaysNew
plot(sumByInterval$interval, avStepsInterval,
type = "l", col = "blue", lwd = 2, ann = FALSE)
title(xlab = "Interval", ylab = "Av. Steps",
main = "Average steps for intervals")
box()
plot(sumByIntervalNew$interval, avStepsIntervalNew,
type = "l", col = "blue", lwd = 2, ann = FALSE)
plot(sumByInterval$interval, avStepsInterval,
type = "l", col = "res", lwd = 2, ann = FALSE, add=T)
plot(sumByIntervalNew$interval, avStepsIntervalNew,
type = "l", col = "blue", lwd = 2, ann = FALSE)
plot(sumByInterval$interval, avStepsInterval,
type = "l", col = "red", lwd = 2, ann = FALSE, add=T)
plot(sumByIntervalNew$interval, avStepsIntervalNew,
type = "l", col = "blue", lwd = 2, ann = FALSE)
points(sumByInterval$interval, avStepsInterval,
type = 1, col = "red", lwd = 2, ann = FALSE)
plot(sumByIntervalNew$interval, avStepsIntervalNew,
type = "l", col = "blue", lwd = 2, ann = FALSE)
points(sumByInterval$interval, avStepsInterval,
type = "l", col = "red", lwd = 2, ann = FALSE)
avStepsIntervalNew <- sumByIntervalNew$steps/numOfdaysNew
sumByIntervalNew <- ddply(myDataNew, "interval", na.rm = TRUE, numcolwise(sum))
# check that each interval has same number of values (days):
summary(table(myDataNew$interval))
numOfdaysNew <- length(totalsByDayNew)
avStepsIntervalNew <- sumByIntervalNew$steps/numOfdaysNew
plot(sumByIntervalNew$interval, avStepsIntervalNew,
type = "l", col = "blue", lwd = 2, ann = FALSE)
points(sumByInterval$interval, avStepsInterval,
type = "l", col = "red", lwd = 2, ann = FALSE)
title(xlab = "Interval", ylab = "Av. Steps",
main = "Average steps for intervals")
totalsDifference <- totalsByDayNew - totalsByDay
data.frame(c(stepsMedian, stepsMean), c(stepsMedianNew, stepsMeanNew) )
stepsMedianNew <- median(totalsByDayNew)
stepsMeanNew <- mean(totalsByDayNew)
data.frame(c(stepsMedian, stepsMean), c(stepsMedianNew, stepsMeanNew) )
summary(myDataNAOmit)
summary(totalsByDay)
summary(totalsByDayNew)
data.frame(c(stepsMedian, stepsMean), c(stepsMedianNew, stepsMeanNew) )
data.frame(c(stepsMedian, stepsMedianNew), c(stepsMean, stepsMeanNew) )
colnames(compareMeans) <- c("Median", "Mean")
compareMeans <- data.frame(c(stepsMedian, stepsMedianNew), c(stepsMean, stepsMeanNew) )
colnames(compareMeans) <- c("Median", "Mean")
compareMeans
